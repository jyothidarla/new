Date: 24/8/2023 
create a cluster: with 3 nodes(slaves/mineons)
install required softwares to set up:kubectl and eksctl.create a cluster. makesure you have configure <aws-iam-authorization>
#kubectl get nodes................it will show all the nodes in the machine.
#kubectl run --image nginx webserver.............it will run nginx container on nodes.
#kubectl get pods.............webserver pod is available. here pod is smallest layer object on top of a container. kubectl commands will communicate to the pod. inthis way irrespective of any underlyning architecture(dockerengine) it will
#kubectl get pods -o wide .........out of the 3 slaves i have where webserver contaainer is running? "its shows name of the nodes"
lets check which one has this name?
#kubectl get nodes. it will shows all the nodes info
> we know the that on the master machine there is a component called kubescheduler, it checks the h/w resources,which decides that whre the pod suppose to be created. its entirely its job.
>To know the entire details about pod: 
  #kubectl describe pods webserver<name> | less
  >its showing pod name, namespaces(logical partitions in the cluster,the pods are running the namespace cannot communicate with other pods running in the other namespace ).
  >(node_which machine)where its running, when its started, labels associated, image, whether its pod running status or not. all the info cames over here sec called "events" 
  To delete pods
  #kubectl delete pods webserver
  ------------------------------------------------------------------------
Imperative commands: using like cli for doing operations on files.
  
  #To create mysql as a pod.
  #kubctl run --image mysql:5 mydb<pod_name> --env MYSQL_ROOT_PASSWD=jyothi............pod as name mydb has been created.
  #kubectl get pods.....my pod is in running status.
  #kubectl get pods -o wide
  #kubectl exec -it mydb -- bash...it will enter into mysql environment.
  >>mysql -u root -p
   give that password. and execute the mysql commands.
   #kubectl delete pods mydb
  
  -----------------------------------------------------------------------------------------
  use yaml files.

  > apiVersion:V1
  > kind: which type of kubernetes obeject, that you have planning to create. or which type of kubernetes object you have to create.
         and for creating that objects it require some "code libraries are necessary".when code lib is available then it can create kubenetes objects.
       , that is known as "apiVersion" .
       fro ex: if i want to create a pod, i want to have V1 codelibrary, imported, then process of pod has been created.
  ------
Basics of kubernetes: which type of version we have to take, fof obejects.
--------
 > metadata: an additional info 
 > spec: important component: 
     if you are creating pods-containers info is there,
     if you are craeting service objects- network info is there 
     specification will have what are the objects core components are there.

Every yaml file has these things---apiVersion, kind, matadata, spec.
-----------------------------------------------------------------------------------------------------------------
Basic definition files:

every yaml file has left hand are predefined, not change but 
> lables : <key-value> anything we can give, additional info about the obj.
> spec: child element we have is "containers", here we have to create a pod so within the pod its has a containers.
   #spec:
     - containers: 
         name:
         image:

>kubectl apply -f <name-of-the-file>
>kubectl get pods
>kubectl delete -f <name-of-the-file>
----------------------------------------------------------------
create postgres definition file: #vim postgres-pod-definition.yml
---
apiVersion: v1
kind: pod
metadata: 
  name: postgres_pod
  labels: 
    type: db
    author: jyothi
spec: 
  - containers:
       name: mybd
       image: postgres
       env: 
         - name: POSTGRES_PASSWORD
           value: jyothi@123
         - name: POSTGRES_USER
           value: jyothi
         - name: POSTGRES_DB
           value: mydb  
...
#kubectl apply -f postgres-pod-definition.yml
#kubectl get pods
#kubectl get nodes
#kubectl get pods -o wide
#kubectl describe pods postgres-pod-definition.yml | less
#kubectl delete -f postgres-pod-definition.yml -------k8s required more h/w resources compared to dockerswarm.
------------------------------------------------------------------------------------------------------------------------
create jenkins pod & port mapping
vim pod-jenkins.yml
---
apiVersion: v1
kind: pod
metadata: 
  name: myjenkins-pod
  labels:
    type: automation-tool
    author: jyothi
spec:
  - containers:
      name: myjenkins
      image: jenkins/jenkins
      ports:
        - containerPort: 8080.......................(predefined)
          hostPort: 8080............................(mychoice)
...
#kubectl apply -f pod-jenkins.yml
#kubectl get pods -o wide
#kubectl describe pods pod-jenkins.yml
#kubectl get nodes -o wide ...........where you have notice additional info about nodes(roles<none>....slaves)
#kubectl delete pods -f pod-jenkins.yml

> it will not work because we create yaml files on vi editor, use pycharm.
----------------------------------------------------------------------------------------------------------
namespace: logical partion in the k8s cluster.
 > when k8s created automatically some namespaces are generated.
#kubectl get namespaces
    > except the <default> namespace remaining are for maintained all nodes. like kubeschedular giving h/w resources, etcd- desired states, control manager.
     > all those services/objects are running in the from of pods those are running in the bachground.
    > we were creating pods on default namespace.
    > by default all pods are getting created in the <default> namespace.
    > If you want to create own namespace for running pod. first of all create that namespace.
<namespaces are defined in metadata>
   #vim namespace.yml
   ---
   apiVersion: v1
   kind: Namespace
   metadata:
     name: test-ns
   ...
#kubectl apply -f namespace.yml
#kubectl get namespace
-------------------------
use that above namespace, create pod
#vim pod-webserver.yml
---
apiVersion: v1
kind: pod
metadata:
 name: webserver-pod
 namespace: test-ns
 labels:
   type: webserver
   author: jyothi
spec: 
  - containers
      name: webserver-http
      iamge: httpd
      ports:
        - containerPort: 80
          hostPost: 8080
...
#kubectl appy -f pod-webserver.yml
#kubectl get pods -o wide
let check httpd webserver running or not on that external ip.
#kubectl delete -f pod-webserver.yml
-----------------------------------------------
